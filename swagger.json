{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Yet Another Node.js Blogg Application API",
    "description": "Yet Another Node.js Blogg Application API",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "localhost:3000",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Users",
      "description": "API for users in the system"
    },
    {
      "name": "House",
      "description": "API for the house in the system"
    },
    {
      "name": "Uploads",
      "description": "Upload images to server"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/user/signup": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Create new user in system",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we want to create",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "New user is created",
            "schema": {
              "$ref": "#/definitions/SuccessUserResponse"
            }
          },
          "40x": {
            "description": "When user creation is failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Login the user",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User that we want to login",
            "schema": {
              "properties": {
                "email": {
                  "type": "string",
                  "example": "manovagyanik1@gmail.com"
                },
                "password": {
                  "type": "string",
                  "example": "pass1234"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Logged in success full",
            "schema": {
              "$ref": "#/definitions/SuccessUserResponse"
            }
          },
          "40x": {
            "description": "Logged in failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "List of users",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "page number, Default to Zero"
          },
          {
            "name": "email",
            "in": "query",
            "description": "single email or list of emails separated by comma and no space"
          },
          {
            "name": "role",
            "in": "query",
            "description": "single role or list of roles separated by comma and no space"
          },
          {
            "name": "status",
            "in": "query",
            "description": "single status or list of status separated by comma an no space"
          },
          {
            "name": "sex",
            "in": "query",
            "description": "single sex or list of sex separated by comma an no space"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of user with page size of 50",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DetailedUser"
                  }
                }
              }
            }
          },
          "4xx": {
            "description": "Fetching failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/user/{userId}": {
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "ID of user that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user with given ID",
        "responses": {
          "200": {
            "description": "User is found",
            "schema": {
              "properties": {
                "success": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/definitions/DetailedUser"
                    }
                  }
                }
              }
            }
          },
          "4xx": {
            "description": "User is not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "summary": "Update user with give ID",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "User with new values of properties",
            "schema": {
              "$ref": "#/definitions/DetailedUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User is Updates",
            "schema": {
              "properties": {
                "success": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/definitions/DetailedUser"
                    }
                  }
                }
              }
            }
          },
          "4xx": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/user/logout": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Logout user",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Email verification sent",
            "schema": {
              "$ref": "#definitions/SuccessUserResponse"
            }
          },
          "4xx": {
            "description": "Verification Failed",
            "schema": {
              "$ref": "#definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/user/verify_email": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Verify the email",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Email"
          },
          {
            "name": "emailToken",
            "in": "query",
            "description": "Email Token sended via email"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Email verified",
            "schema": {
              "$ref": "#definitions/SuccessUserResponse"
            }
          },
          "4xx": {
            "description": "Verification Failed",
            "schema": {
              "$ref": "#definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/user/details": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Get details of logged in user",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details",
            "schema": {
              "$ref": "#definitions/DetailedUser"
            }
          },
          "4xx": {
            "description": "User not logged in",
            "schema": {
              "$ref": "#definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/user/email_confirmation": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Request server to send email for Verification",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Email"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Email verification sent",
            "schema": {
              "$ref": "#definitions/SuccessUserResponse"
            }
          },
          "4xx": {
            "description": "Verification Failed",
            "schema": {
              "$ref": "#definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/user/password_reset": {
      "get": {
        "tags": [
          "Users"
        ],
        "description": "Request for password reset Token to reset password",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Email"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Email verified",
            "schema": {
              "$ref": "#definitions/SuccessUserResponse"
            }
          },
          "4xx": {
            "description": "Verification Failed",
            "schema": {
              "$ref": "#definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "definitions": "Reset the password",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "schema": {
              "properties": {
                "password": {
                  "type": "string",
                  "example": "pass1234",
                  "description": "new password"
                },
                "passwordToken": {
                  "type": "string",
                  "example": "12349583",
                  "description": "Password reset token sent to your mail"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Email verified",
            "schema": {
              "$ref": "#definitions/SuccessUserResponse"
            }
          },
          "4xx": {
            "description": "Verification Failed",
            "schema": {
              "$ref": "#definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/house": {
      "post": {
        "tags": [
          "House"
        ],
        "description": "Create a new House with provided details",
        "parameters": [
          {
            "name": "house",
            "in": "body",
            "description": "House that we want to create",
            "schema": {
              "$ref": "#/definitions/House"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "New house is created",
            "schema": {
              "$ref": "#/definitions/SuccessUserResponse"
            }
          },
          "4xx": {
            "description": "When house creation is failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/house/{houseId}": {
      "parameters": [
        {
          "name": "houseId",
          "in": "path",
          "required": true,
          "description": "ID of house that we want to find",
          "type": "string"
        }
      ],
      "get": {
        "tags": [
          "House"
        ],
        "summary": "Get house details of the house with ID",
        "responses": {
          "200": {
            "description": "House is found",
            "schema": {
              "properties": {
                "success": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/definitions/House"
                    }
                  }
                }
              }
            }
          },
          "4xx": {
            "description": "House is not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put": {
        "summary": "Update house with given ID",
        "tags": [
          "House"
        ],
        "parameters": [
          {
            "name": "house",
            "in": "body",
            "description": "House with updates values",
            "schema": {
              "$ref": "#/definitions/House"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "House is Updated",
            "schema": {
              "properties": {
                "success": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "$ref": "#/definitions/House"
                    }
                  }
                }
              }
            }
          },
          "4xx": {
            "description": "House is not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete":{
        "summary": "Delete house with given ID",
        "tags": ["House"],
        "responses": {
          "200": {
            "description": "House is deleted",
            "schema": {
              "properties": {
                "success": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "4xx": {
            "description": "House is not found",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/house/search": {
      "post": {
        "tags": [
          "House"
        ],
        "description": "Search house based on parameters",
        "parameters": [
          {
            "name": "house",
            "in": "body",
            "description": "Search parameters",
            "schema": {
              "$ref": "#definitions/House Search"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number , defaults to ZERO"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Fetched a list of houses matching search params",
            "schema": {
              "properties": {
                "success": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#definitions/House"
                      }
                    }
                  }
                }
              }
            }
          },
          "4xx": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "uploads/images": {
      "description": "Upload a single image to server",
      "post": {
        "tags": [
          "Uploads"
        ],
        "description": "Upload single image to server",
        "parameters": {},
        "responses": {
          "200": {
            "description": "Image is uploaded successfully",
            "schema": {
              "properties": {
                "success": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "success message"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "uploadUrl": "string",
                        "description": "Url to fetch uploaded image",
                        "example": "http://localhost:3000/uploads/images/abc.jpg"
                      }
                    }
                  }
                }
              }
            }
          },
          "4xx": {
            "description": "Upload error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "DetailedUser": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "email": {
          "type": "string",
          "uniqueItems": true
        },
        "name": {
          "type": "string"
        },
        "sex": {
          "type": "string",
          "enum": [
            "male",
            "female",
            "other"
          ]
        },
        "role": {
          "type": "string",
          "enum": [
            "admin",
            "realtor",
            "consumer"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "active",
            "inactive"
          ]
        },
        "createdAt": {
          "type": "string",
          "example": "ISO Format date"
        },
        "updatedAt": {
          "type": "string",
          "example": "ISO Format date"
        }
      }
    },
    "House": {
      "properties": {
        "title": {
          "type": "string",
          "example": "3BHK at posh locality of gurgaon sector 46",
          "description": "Title with length of range (10, 50)"
        },
        "description": {
          "type": "string",
          "example": "3BHK at posh locality of gurgaon sector 46 with fully furnished and green surroundings with no interference from landlord",
          "description": "Title with length of range (50, 1000)"
        },
        "rent": {
          "type": "double",
          "example": 1000.0,
          "description": "Rent in Dollars in range (100, 999000)"
        },
        "maintenance": {
          "type": "object",
          "properties": {
            "monthly": {
              "type": "double",
              "example": 10,
              "description": "Monthly maintenance charges"
            },
            "deposit": {
              "type": "double",
              "example": 10,
              "description": "Deposit charges"
            },
            "brokerage": {
              "type": "double",
              "example": 10,
              "description": "brokerage charges"
            },
            "annually": {
              "type": "double",
              "example": 10,
              "description": "annually maintenance charges"
            }
          }
        },
        "builtArea": {
          "type": "double",
          "description": "Built area of the house minimum 250 sqft",
          "example": 300
        },
        "carpetArea": {
          "type": "double",
          "description": "Total area of the house minimum 250 sqft and greater or equal than builtArea",
          "example": 300
        },
        "city": {
          "type": "string",
          "description": "Valid city name of lenght in range (2,30)",
          "example": "gurgaon"
        },
        "locality": {
          "type": "string",
          "description": "Valid locality name of lenght in range (2,30)",
          "example": "gurgaon sector 8"
        },
        "country": {
          "type": "string",
          "description": "Valid country name of lenght in range (2,30)",
          "example": "india"
        },
        "address": {
          "type": "string",
          "description": "Valid address name of lenght in range (10,150)",
          "example": "gurgaon"
        },
        "latitude": {
          "type": "double",
          "description": "Valid latitude",
          "example": -19.09
        },
        "longitude": {
          "type": "double",
          "description": "Valid longitude",
          "example": -19.09
        },
        "type": {
          "type": "string",
          "enum": [
            "1rk",
            "2rk",
            "1bhk",
            "2bhk",
            "3bhk",
            "4bhk",
            "5bhk",
            "5bhk+"
          ]
        },
        "availability": {
          "type": "string",
          "enum": [
            "yes",
            "no",
            "archive"
          ]
        },
        "availableFor": {
          "type": "string",
          "enum": [
            "all",
            "family",
            "couples",
            "bachelors"
          ]
        },
        "availableFrom": {
          "type": "string",
          "example": "2012-07-14T01:00:00+01:00",
          "description": "Valid ISO date"
        },
        "floor": {
          "type": "integer",
          "example": 1,
          "description": "Valid floor within range (0, 150)"
        },
        "powerBackup": {
          "type": "string",
          "enum": [
            "full",
            "partial",
            "no"
          ]
        },
        "features": {
          "type": "array",
          "description": "List of features",
          "example": [
            "24x7 security"
          ]
        },
        "tags": {
          "type": "array",
          "description": "List of tags, easy for searching",
          "example": [
            "seaview"
          ]
        },
        "images": {
          "type": "array",
          "description": "List of image urls",
          "example": [
            "https://picsum.photos/500/500",
            "https://picsum.photos/500/500"
          ]
        },
        "furnishingStatus": {
          "type": "string",
          "enum": [
            "furnished",
            "unfurnished",
            "semifurnished"
          ]
        },
        "createdAt": {
          "type": "string",
          "description": "Valid ISO date , Not required for creating"
        },
        "updatedAt": {
          "type": "string",
          "description": "Valid ISO date, Not required for creating"
        }
      }
    },
    "House Search": {
      "properties": {
        "searchString": {
          "type": "string",
          "example": "gurgaon",
          "description": "Search string that can be part of city, locality, street"
        },
        "rent": {
          "type": "array",
          "items": {
            "type": "double"
          },
          "example": [
            1,
            10000
          ],
          "description": "Search for rent between the range"
        },
        "builtArea": {
          "type": "array",
          "items": {
            "type": "double"
          },
          "example": [
            200.0,
            1000.0
          ],
          "description": "Search for house with built area in above range"
        },
        "carpetArea": {
          "type": "array",
          "items": {
            "type": "double"
          },
          "example": [
            200.0,
            1000.0
          ],
          "description": "Search for house with carpet area in above range"
        },
        "city": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "delhi",
            "gurgaon"
          ],
          "description": "Search house in above cities only"
        },
        "locality": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "dlf1",
            "dlf2"
          ],
          "description": "Search house in above locality only"
        },
        "country": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "india",
            "usa"
          ],
          "description": "Search house in above countries only"
        },
        "latitude": {
          "type": "array",
          "items": {
            "type": "double"
          },
          "example": [
            -19.0,
            10.0
          ],
          "description": "Search for house with latitudes in above range"
        },
        "longitude": {
          "type": "array",
          "items": {
            "type": "double"
          },
          "example": [
            -19.0,
            10.0
          ],
          "description": "Search for house with longitude in above range"
        },
        "type": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "1rk",
            "1bhk"
          ],
          "description": "Search house in above types only"
        },
        "availability": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "yes",
            "no"
          ],
          "description": "Search house in above availability only , default yes"
        },
        "availableFor": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "all",
            "bachelors",
            "couple"
          ],
          "description": "Search house in above available tenants only , default all"
        },
        "availableFrom": {
          "type": "string",
          "example": "2008-09-15T15:53:00",
          "description": "Valid ISO date"
        },
        "powerBackup": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "full",
            "partial"
          ],
          "description": "Search for with only above mentioned power backup type"
        },
        "furnishingStatus": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "furnished"
          ],
          "description": "Search for with only above mentioned power backup type"
        },
        "UserId":{
          "type": "array",
          "items":{
            "type": "string"
          },
          "example":[
          ],
          "description": "Search for houses with these users only"
        }
      }
    },
    "SuccessResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "string"
        }
      }
    },
    "SuccessUserResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Success message"
            }
          }
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}